name: Build Packer Custom Images

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  check-merged:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - run: echo "PR was merged, proceeding with build"

  integration-test:
    needs: check-merged
    runs-on: ubuntu-latest
    
    # Add PostgreSQL service container with secrets
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_healthcheck_db
        ports:
          - 5432:5432
        # Health check to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          python -m pytest tests/ -v
        env:
          # Set database URL for testing with secrets
          TEST_DATABASE_URL: postgresql+psycopg2://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/test_healthcheck_db
          DATABASE_URL: postgresql+psycopg2://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/test_healthcheck_db
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  build-artifact:
    needs: integration-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create application zip
        run: |
          zip -r webapp.zip . -x "*.git*" "packer/*" ".github/*" "systemd/*" "venv/*"
          
      - name: Upload webapp artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: webapp.zip

  build-images:
    needs: build-artifact
    runs-on: ubuntu-latest
    outputs:
      ami_id: ${{ steps.set-ami-id.outputs.ami_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download webapp artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: ./
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"
          
      - name: Initialize Packer
        working-directory: ./packer
        run: packer init .
        
      - name: Build Packer Images
        working-directory: ./packer
        run: |
          packer build \
            -var "postgres_password=${{ secrets.POSTGRES_PASSWORD }}" \
            -var "aws_ami_users=${{ secrets.AWS_AMI_USERS }}" \
            cloud.pkr.hcl
        id: packer-build
      
      - name: Display manifest contents
        working-directory: ./packer
        run: ls -la manifest.json || echo "Manifest file missing"
        
      - name: Extract AMI ID
        id: set-ami-id
        working-directory: ./packer
        run: |
          if [ -f "manifest.json" ]; then
            AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
            echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          else
            echo "::error::Manifest file not found!"
            exit 1
          fi

  deploy-demo:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials (DEMO)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Create new Launch Template version
        run: |
          aws ec2 create-launch-template-version \
            --launch-template-name csye6225_asg \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${{ needs.build-images.outputs.ami_id }}\"}"

      - name: Start instance refresh
        run: |
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name web-app-asg \
            --preferences '{"InstanceWarmup": 180, "MinHealthyPercentage": 90}' \
            --query 'InstanceRefreshId' \
            --output text)
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for instance refresh
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name web-app-asg \
              --instance-refresh-ids ${{ env.INSTANCE_REFRESH_ID }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Current refresh status: $STATUS"
            
            if [ "$STATUS" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            fi
            
            echo "Refresh in progress. Checking again in 30 seconds..."
            sleep 30
          done
          echo "Deployment completed successfully"